#!/usr/bin/env bash
#####################################################################################
##
## NOTE:
## This is a command line tool to operate on otomi-core.
## All commands are executed in docker container.
## Keep this file as simple as possible:
## - do not depend on any external files.
## - do not use any non standard tooling.
## - only Docker is needed to run otomi-core image
## If you need to use any extra binaries then most probably you want to add them to the otomi/tools image.
##
#####################################################################################
# shellcheck disable=SC2128
[ "${BASH_VERSINFO:-0}" -lt 4 ] && echo "You are using $BASH_VERSINFO, while we only support Bash -ge than version 4. Please upgrade." && exit 1
if [ -n "$TESTING" ]; then
  CI=1
  ENV_DIR="$PWD/tests/fixtures"
elif [ -z "$ENV_DIR" ]; then
  if [ ! "$(ls -A $PWD)" ]; then
    export ENV_DIR=$PWD
  elif [ -f "$PWD/env/cluster.yaml" ] && [ -f "$PWD/env/settings.yaml" ] && [ -d "$PWD/env/charts" ]; then
    export ENV_DIR=$PWD
  else
    echo -e "ENV_DIR is not set, otomi needs ENV_DIR to function. \nENV_DIR can be a (yet) non-existing path, but needs to be an absolute path." && exit 1
  fi
else
  mkdir -p $ENV_DIR
fi

# Use tput for a clear screen when starting, that way it doesn't need to "hang" on empty while prepping
# https://linuxcommand.org/lc3_adv_tput.php
tput_exists=$(which tput)
[ -n "$tput_exists" ] && tput smcup
silent() {
  if [ -n "$tput_exists" ] ; then
    "$@"
  else
    "$@" &>/dev/null
  fi
}

this_is_bash=$(ps -o ppid= $$)
executing_shell=$(ps -o comm= $this_is_bash | sed "s/[^[:alnum:]\/]//g")
path_to_exec_shell=$(which $executing_shell)

# TODO: Remove this line
OTOMI_TAG=${OTOMI_TAG:-otomi-zx}
# # Parse yaml block without yq: https://stackoverflow.com/a/49190338/14982291
otomi_core_version="master"
[ -f "package.json" ] && otomi_core_version=$(awk -F \" '/"version": ".+"/ { print $4; exit; }' package.json)
otomi_version=$([ -f $ENV_DIR/env/settings.yaml ] && awk '/otomi/{flag=1} flag && /version:/{print $NF;flag=""}'  $ENV_DIR/env/settings.yaml)
otomi_version=${otomi_version:-$otomi_core_version}
readonly otomi_version
OTOMI_TAG=${OTOMI_TAG:-$otomi_version}

readonly otomi_tools_image="otomi/core:${OTOMI_TAG}"
# shellcheck disable=SC2155
readonly base_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
readonly calling_args="$*"
script_full_path="$base_dir/${BASH_SOURCE[0]##*/}"
if [[ ${BASH_SOURCE[0]} == '/'* ]]; then
  script_full_path="${BASH_SOURCE[0]}"
fi
readonly script_full_path

update_base="https://raw.githubusercontent.com/redkubes/otomi-core/${OTOMI_TAG}/binzx/otomi"

run_self_update() {
  echo "Performing self-update..."

  # Download new version
  echo -n "Downloading latest version..."
  if ! wget --quiet --output-document="$0.tmp" $update_base; then
    echo "Failed: Error while trying to wget new version!"
    echo "File requested: $update_base"
    exit 1
  fi
  echo "Done."

  # Copy over modes from old version
  OCTAL_MODE=$(stat -c '%a' $script_full_path)
  if ! chmod $OCTAL_MODE "$0.tmp"; then
    echo "Failed: Error while trying to set mode on $0.tmp."
    exit 1
  fi

  # Spawn update script
  cat >update-otomi.sh <<EOF
#!/bin/bash
# Overwrite old file with new
if mv "$0.tmp" "$0"; then
  echo "Done. Update complete."
  rm \$0
  exec "$0" "$calling_args"
else
  echo "Failed!"
fi
EOF

  echo -n "Inserting update process..."
  exec /bin/bash update-otomi.sh
}

check_update() {
  if [[ $base_dir == *"otomi-core"* ]] ||
    [[ $(pwd) == *"otomi-core"* ]] ||
    [[ $calling_args == *'-no-interactive'* ]] ||
    [[ $calling_args == *'-ni'* ]]; then
    return 0
  fi

  last_commit_date=$(curl -s "https://api.github.com/repos/redkubes/otomi-core/commits?sha=${OTOMI_TAG}&path=binzx%2Fotomi&page=1&per_page=1" | grep -A5 '"committer":' | grep '"date":' | awk -F': ' '{print $2}')
  last_file_change=$(date -u -r $script_full_path "+%Y-%m-%dT%H:%M:%SZ")
  last_commit_date=$(echo $last_commit_date | tr -d '"')
  last_commit_date_sec=$(date --date="$last_commit_date" +%s)
  last_file_change_sec=$(date --date="$last_file_change" +%s)

  if [ "$last_commit_date_sec" -ne "0" ] && [ "$last_commit_date_sec" -gt "$last_file_change_sec" ]; then
    read -r -p "Newer version is available, do you want to update (yes/No)? " answer
    case ${answer:0:1} in
    y | Y)
      run_self_update
      ;;
    *)
      return 0
      ;;
    esac
  fi
}
silent echo "Checking for updates"
[ -z $CI ] && check_update

silent echo "Preparing docker environment variables"
tmp_env=$(mktemp)
env | grep -v -e ^PATH= -e ^HOME= -e ^USER= -e ^TMPDIR= -e ^LC_ALL= >$tmp_env

cat >>$tmp_env <<EOF
SHELL=${path_to_exec_shell}
OTOMI_TAG=${OTOMI_TAG}
OTOMI_CALLER_COMMAND=${BASH_SOURCE[0]##*/}
OTOMI_IN_DOCKER=true
EOF

helm_config="$HOME/.config/helm"
uname -a | grep -i darwin >/dev/null && helm_config="$HOME/Library/Preferences/helm"

stack_dir='/home/app/stack'
executable="node --experimental-specifier-resolution=node ${stack_dir}/dist/otomi.js --"

stack_volume=""
tmp_volume_dir=$(mktemp -d)
tmp_volume=" -v $tmp_volume_dir:/tmp"
if [[ $base_dir == *"otomi-core"* ]] || [[ $(pwd) == *"otomi-core"* ]]; then
  silent echo "Checking if in dev environment"
  if [[ $base_dir == *"otomi-core"* ]]; then
    stack_dir=$(cd "$base_dir/.." && pwd)
  elif [[ $(pwd) == *"otomi-core"* ]]; then
    stack_dir=$(pwd | awk -F'otomi-core' '{print $1"otomi-core"}')
  fi

  stack_volume="-v $stack_dir:$stack_dir"
  tmp_volume="-v /tmp:/tmp"

  # Use development distribution if exists
  if [ -f "${stack_dir}/dist/otomi.js" ]; then
    executable="node --experimental-specifier-resolution=node ${stack_dir}/dist/otomi.js --"
  fi
  echo "OTOMI_DEV=true" >>$tmp_env
fi

check_volume_path() {
  source=$1
  dest=$2
  [ -z $source ] && [ -z $dest ] && echo "" && return 0
  echo "-v $source:$dest"
  return 0
}

cmd="${executable} $*"
# If command is "otomi bash"
if [ "$1" = "bash" ] && [ "$#" = "1" ]; then
  cmd="bash"
fi

silent echo "Pulling latest version of the docker image"
[ -z $NOPULL ] && silent docker pull $otomi_tools_image
status=$?
if [ "$status" -ne 0 ]; then
  echo "Could not find an image for the supplied OTOMI_TAG: '${OTOMI_TAG}'"
  exit $status
fi

[ -n "$tput_exists" ] && tput clear
docker run --network host --rm -it \
  $stack_volume \
  $tmp_volume \
  $(check_volume_path ${KUBECONFIG:-$HOME/.kube} "/home/app/.kube") \
  $(check_volume_path $HOME/.ssh "/home/app/.ssh") \
  $(check_volume_path $helm_config "/home/app/.config/helm") \
  $(check_volume_path $HOME/.config/gcloud "/home/app/.config/gcloud") \
  $(check_volume_path $HOME/.aws "/home/app/.aws") \
  $(check_volume_path $HOME/.azure "/home/app/.azure") \
  $(check_volume_path $ENV_DIR "$stack_dir/env") \
  $(check_volume_path $ENV_DIR "$ENV_DIR") \
  $(check_volume_path $GOOGLE_APPLICATION_CREDENTIALS "$GOOGLE_APPLICATION_CREDENTIALS") \
  $(check_volume_path /var/run/docker.sock "/var/run/docker.sock") \
  --env-file "$tmp_env" \
  -w "$stack_dir" \
  "$otomi_tools_image" \
  bash -c "$cmd"

status=$?
rm -f "$tmp_env"
rm -rf "$tmp_volume_dir"

# Named volume stuff
docker volume rm $NAMED_VOLUME >/dev/null 2>&1
docker rmi hello-world >/dev/null 2>&1

exit $status
